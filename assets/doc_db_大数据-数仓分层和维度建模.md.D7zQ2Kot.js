import{_ as e,c as a,o as t,a4 as r}from"./chunks/framework.IXvbZIHp.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"doc/db/大数据-数仓分层和维度建模.md","filePath":"doc/db/大数据-数仓分层和维度建模.md"}'),o={name:"doc/db/大数据-数仓分层和维度建模.md"},l=r('<p><a href="https://www.modb.pro/db/241289" target="_blank" rel="noreferrer">https://www.modb.pro/db/241289</a></p><p><a href="https://blog.csdn.net/weixin_45532984/article/details/124731837" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_45532984/article/details/124731837</a></p><h2 id="维度的三种模型" tabindex="-1">维度的三种模型 <a class="header-anchor" href="#维度的三种模型" aria-label="Permalink to &quot;维度的三种模型&quot;">​</a></h2><h3 id="星型模型" tabindex="-1">星型模型 <a class="header-anchor" href="#星型模型" aria-label="Permalink to &quot;星型模型&quot;">​</a></h3><p>事实表被多个维表或一个或多个层次所包围 多维数据集的每一个维度都直接与事实表相连接，不存在渐变维度，所以数据有一定的冗余</p><h3 id="雪花模型" tabindex="-1">雪花模型 <a class="header-anchor" href="#雪花模型" aria-label="Permalink to &quot;雪花模型&quot;">​</a></h3><p>在星型模型中，维度表包括了该维度的所有信息，因为没有分层，所以维度表里面可能会有冗余出现。 为了减少维度表的冗余，这时我们可以使用雪花模型。雪花模型在星型模型的基础上，把维度表中的一些字段进行进一步的拆分，减少冗余，使其更有层次。</p><h2 id="我所实践的案例" tabindex="-1">我所实践的案例 <a class="header-anchor" href="#我所实践的案例" aria-label="Permalink to &quot;我所实践的案例&quot;">​</a></h2><ul><li>数仓: GreemPlum</li></ul><p>使用一个库,不同的业务领域直接使用 schema 隔离,这样方便 比如 DM层的数据表的构建,避免数据跨库移动,提高建仓效率</p><ul><li>分层</li></ul><p>DCM: 缓冲层(可以简单理解为业务系统的短期快照,dcm的意义在于避免系统故障导致对业务系统反复取数的问题) ODS: 贴源层(主流方案,表结构与业务系统保持一致,大表可以使用拉链表提供存储效率) FDM: 基础整合层 GDM:公告汇总层 DM: 集市层</p>',12),_=[l];function i(d,n,s,c,h,p){return t(),a("div",null,_)}const u=e(o,[["render",i]]);export{m as __pageData,u as default};
